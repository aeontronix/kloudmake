<!--
  ~ Copyright (c) 2024 Aeontronix Inc
  -->

<section xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Resource creation</title>
    <para>
        Resources are the primary concept of AeonBuild, each resource has a type (ie core.file), and a number of
        attributes. Some attributes are common to all resource types like for example id and uid, while other
        attributes are specific to each resource type.
    </para>
    <para>
        The easiest way to define resources is to use AeonBuild's DSL to define the resources. Those scripts can
        be created by just naming the file with an .stl file extension. In order to create a resource using the
        DSL, you can use the following syntax:
    </para>
    <para>
        <programlisting language="stl">core.file { path="/tmp/test.txt" content="Hello World" }</programlisting>
    </para>
    <para>
        This would create a resource of type '<code>core.file</code>' (resource type 'file' in the package 'core',
        with the attribute path set to /tmp/test.txt and the attribute content set to "Hello World". If you save
        this in a file called `test.stl` and run the command<code>kloudmake test.stl</code>, this would create
        a file /tmp/test.txt and set the content to "Hello World". If the file already exists and has a
        different content, it would just modify it to the specified content.
    </para>
    <para>
        The DSL also allows a shortcut to specifying the 'id' attribute using the following syntax:
    </para>
    <para>
        <programlisting language="stl">core.file { "testfile": path="/tmp/test.txt" content="Hello World" }</programlisting>
    </para>
    <para>
        This would be the same as specifying
    </para>
    <para>
        <programlisting language="stl">core.file { id="testfile", path="/tmp/test.txt" content="Hello World" }</programlisting>
    </para>
    <para>
        You can also easily create multiple resources of the same type using the following syntax:
    </para>
    <programlisting language="stl">core.file {
    "testfile1": path="/tmp/test1.txt", content="Hello World 1";
    "testfile2": path="/tmp/test2.txt", content="Hello World 2";
}</programlisting>
    <para>
        When specifying multiple resources, you can also specify attributes which will apply to all such resources using this syntax:
    </para>
    <programlisting language="stl">core.file( content="Hello World" ) {
    "testfile1": path="/tmp/test1.txt";
    "testfile2": path="/tmp/test2.txt";
}</programlisting>
    <para>
        If you are repeatedly using resources from a same package, you can having having to type in the package
        name every time by using the import statement:
        <programlisting language="stl"><xi:include href="manual-dsl-import.txt" parse="text"/></programlisting>
    </para>
    <para>
        Resources can be created as the children of other resources. For example:
        <programlisting language="stl">core.ssh {
    address="server.domain",
    core.file { path="/tmp/test.txt" content="Hello World" },
    core.package {
      "web": name="nginx";
      "db": name="mysql";
    }
}</programlisting>
    </para>
</section>
